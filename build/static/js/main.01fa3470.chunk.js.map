{"version":3,"sources":["components/MileageForm.tsx","components/GlobeVisualization.tsx","components/MoonDistanceVisualization.tsx","App.tsx","index.tsx"],"names":["MileageForm","_ref","onSubmit","value","setValue","useState","_jsxs","e","preventDefault","num","Number","replace","isNaN","children","_jsx","htmlFor","id","type","min","onChange","target","placeholder","required","GlobeVisualization","mileage","laps","fullLaps","Math","floor","partialLap","radius","center","circles","i","push","cx","cy","r","fill","stroke","strokeWidth","opacity","partialArc","circumference","PI","strokeDasharray","concat","strokeDashoffset","style","textAlign","margin","width","height","href","x","y","marginTop","toFixed","MoonDistanceVisualization","progress","carX","x1","earthX","y1","x2","moonX","y2","centerY","toLocaleString","App","setMileage","className","mileageValue","color","fontSize","undefined","minimumFractionDigits","maximumFractionDigits","container","document","getElementById","ReactDOM","createRoot","render","React","StrictMode"],"mappings":"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","file":"static/js/main.01fa3470.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\ninterface MileageFormProps {\r\n  onSubmit: (mileage: number) => void;\r\n}\r\n\r\nconst MileageForm: React.FC<MileageFormProps> = ({ onSubmit }) => {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const num = Number(value.replace(\",\", \".\"));\r\n    if (!isNaN(num) && num >= 0) {\r\n      onSubmit(num);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"mileage-input\">\r\n        Quantos quilômetros seu carro tem atualmente:\r\n      </label>\r\n      <input\r\n        id=\"mileage-input\"\r\n        type=\"number\"\r\n        min=\"0\"\r\n        value={value}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        placeholder=\"Ex: 123456\"\r\n        required\r\n      />\r\n      <button type=\"submit\">Calcular</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MileageForm;","import React from 'react';\r\nimport './GlobeVisualization.css';\r\n\r\ninterface GlobeVisualizationProps {\r\n    mileage: number;\r\n}\r\n\r\nconst EARTH_CIRCUMFERENCE = 40075; // km\r\n\r\nconst GlobeVisualization: React.FC<GlobeVisualizationProps> = ({ mileage }) => {\r\n    const laps = mileage / EARTH_CIRCUMFERENCE;\r\n    const fullLaps = Math.floor(laps);\r\n    const partialLap = laps - fullLaps;\r\n\r\n    const radius = 60;\r\n    const circleGap = 14;\r\n    const maxCircle = fullLaps + (partialLap > 0 ? 1 : 0);\r\n    const padding = 20;\r\n    const svgRadius = radius + maxCircle * circleGap + padding;\r\n    const center = svgRadius;\r\n\r\n    // Círculos completos\r\n    const circles = [];\r\n    for (let i = 1; i <= fullLaps; i++) {\r\n        circles.push(\r\n            <circle\r\n                key={i}\r\n                cx={center}\r\n                cy={center}\r\n                r={radius + i * circleGap}\r\n                fill=\"none\"\r\n                stroke=\"#007bff\"\r\n                strokeWidth={4}\r\n                opacity={0.7}\r\n            />\r\n        );\r\n    }\r\n\r\n    // Arco para a fração de volta\r\n    let partialArc = null;\r\n    if (partialLap > 0) {\r\n        const r = radius + (fullLaps + 1) * circleGap;\r\n        const circumference = 2 * Math.PI * r;\r\n        partialArc = (\r\n            <circle\r\n                cx={center}\r\n                cy={center}\r\n                r={r}\r\n                fill=\"none\"\r\n                stroke=\"#ff5733\"\r\n                strokeWidth={4}\r\n                strokeDasharray={`${circumference * partialLap} ${circumference * (1 - partialLap)}`}\r\n                strokeDashoffset={circumference * 0.25}\r\n                opacity={0.85}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div style={{ textAlign: 'center', margin: '30px 0' }}>\r\n            <svg width={center * 2} height={center * 2}>\r\n                {/* Círculos completos */}\r\n                {circles}\r\n                {/* Arco parcial */}\r\n                {partialArc}\r\n                {/* Terra */}\r\n                <image\r\n                    href=\"/kms/images/earth.svg\"\r\n                    x={center - radius}\r\n                    y={center - radius}\r\n                    width={radius * 2}\r\n                    height={radius * 2}\r\n                />\r\n            </svg>\r\n            <div style={{ marginTop: 10 }}>\r\n                <strong>{laps.toFixed(2)} voltas na Terra</strong>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GlobeVisualization;","import React from 'react';\r\n\r\ninterface MoonDistanceVisualizationProps {\r\n    mileage: number;\r\n}\r\n\r\nconst EARTH_TO_MOON_KM = 384400;\r\n\r\nconst MoonDistanceVisualization: React.FC<MoonDistanceVisualizationProps> = ({ mileage }) => {\r\n    // Limita a posição do carro para não passar da Lua\r\n    const progress = Math.min(mileage / EARTH_TO_MOON_KM, 1);\r\n\r\n    // Posições dos elementos no SVG\r\n    const width = 500;\r\n    const height = 120;\r\n    const earthX = 60;\r\n    const moonX = width - 60;\r\n    const centerY = height / 2;\r\n\r\n    // Posição do carro ao longo da linha\r\n    const carX = earthX + (moonX - earthX) * progress;\r\n\r\n    return (\r\n        <div style={{ textAlign: 'center', margin: '30px 0' }}>\r\n            <svg width={width} height={height}>\r\n                {/* Linha entre Terra e Lua */}\r\n                <line\r\n                    x1={earthX + 40}\r\n                    y1={centerY}\r\n                    x2={moonX - 40}\r\n                    y2={centerY}\r\n                    stroke=\"#888\"\r\n                    strokeWidth={6}\r\n                    strokeDasharray=\"8 8\"\r\n                />\r\n                {/* Terra */}\r\n                <image\r\n                    href=\"/kms/images/earth.svg\"\r\n                    x={earthX}\r\n                    y={centerY - 40}\r\n                    width={80}\r\n                    height={80}\r\n                />\r\n                {/* Lua */}\r\n                <image\r\n                    href=\"/kms/images/moon.svg\"\r\n                    x={moonX - 40}\r\n                    y={centerY - 30}\r\n                    width={60}\r\n                    height={60}\r\n                />\r\n                {/* Carrinho */}\r\n                <image\r\n                    href=\"/kms/images/car.svg\"\r\n                    x={carX - 20}\r\n                    y={centerY - 20}\r\n                    width={40}\r\n                    height={40}\r\n                />\r\n            </svg>\r\n            <div style={{ marginTop: 10 }}>\r\n                <strong>\r\n                    {mileage.toLocaleString()} km percorridos ({(progress * 100).toFixed(2)}% do caminho até a Lua)\r\n                </strong>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoonDistanceVisualization;","import React, { useState } from 'react';\r\nimport MileageForm from './components/MileageForm';\r\nimport Infographic from './components/Infographic';\r\nimport GlobeVisualization from './components/GlobeVisualization';\r\nimport MoonDistanceVisualization from './components/MoonDistanceVisualization';\r\nimport './styles/main.css';\r\n\r\nconst App = () => {\r\n    const [mileage, setMileage] = useState(0);\r\n\r\n    const handleMileageSubmit = (mileageValue: number) => {\r\n        setMileage(mileageValue);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <h1>Qual a distância que o seu carro já percorreu?</h1>\r\n            <MileageForm onSubmit={handleMileageSubmit} />\r\n\r\n            {/* Referências */}\r\n            <div style={{ textAlign: 'center', margin: '16px 0', color: '#555', fontSize: '1rem' }}>\r\n                <p>\r\n                    <strong>1 volta completa na Terra:</strong> 40.075 km<br />\r\n                    <strong>Distância da Terra até a Lua:</strong> 384.400 km\r\n                </p>\r\n            </div>\r\n\r\n            {mileage > 0 && (\r\n                <div style={{ margin: '20px 0', textAlign: 'center' }}>\r\n                    <p><strong>Quilometragem total:</strong> {mileage.toLocaleString()} km</p>\r\n                    <p><strong>Voltas ao redor da Terra:</strong> {(mileage / 40075).toFixed(2)}</p>\r\n                    <p><strong>Distância até a Lua:</strong> {(384400 - mileage).toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})} km</p>\r\n                </div>\r\n            )}\r\n            <GlobeVisualization mileage={mileage} />\r\n            <MoonDistanceVisualization mileage={mileage} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\nconst container = document.getElementById('root');\r\nif (container) {\r\n  const root = ReactDOM.createRoot(container);\r\n  root.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  );\r\n}"],"sourceRoot":""}