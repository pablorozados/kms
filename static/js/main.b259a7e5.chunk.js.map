{"version":3,"sources":["components/MileageForm.tsx","components/Infographic.tsx","utils/calculations.ts","components/GlobeVisualization.tsx","components/MoonDistanceVisualization.tsx","App.tsx","index.tsx"],"names":["MileageForm","_ref","onSubmit","mileage","setMileage","useState","_jsxs","e","preventDefault","value","parseFloat","replace","isNaN","children","_jsx","type","onChange","target","placeholder","min","required","Infographic","laps","calculateLapsAroundEarth","distanceToMoon","Math","max","calculateDistanceToMoon","remainingLaps","className","toFixed","src","alt","GlobeVisualization","fullLaps","floor","partialLap","radius","center","circles","i","push","cx","cy","r","fill","stroke","strokeWidth","opacity","partialArc","circumference","PI","strokeDasharray","concat","strokeDashoffset","style","textAlign","margin","width","height","href","x","y","marginTop","MoonDistanceVisualization","progress","carX","x1","earthX","y1","x2","moonX","y2","centerY","toLocaleString","App","mileageValue","container","document","getElementById","ReactDOM","createRoot","render","React","StrictMode"],"mappings":"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","file":"static/js/main.b259a7e5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\ntype MileageFormProps = {\r\n  onSubmit: (mileage: number) => void;\r\n};\r\n\r\nconst MileageForm: React.FC<MileageFormProps> = ({ onSubmit }) => {\r\n  const [mileage, setMileage] = useState<string>(\"\");\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const value = parseFloat(mileage.replace(\",\", \".\"));\r\n    if (!isNaN(value) && value >= 0) {\r\n      onSubmit(value);\r\n      setMileage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        Digite a quilometragem do seu carro:\r\n        <input\r\n          type=\"number\"\r\n          value={mileage}\r\n          onChange={(e) => setMileage(e.target.value)}\r\n          placeholder=\"Ex: 50000\"\r\n          min=\"0\"\r\n          required\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Calcular</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MileageForm;","import React from 'react';\r\nimport { calculateLapsAroundEarth, calculateDistanceToMoon } from '../utils/calculations';\r\n\r\ninterface InfographicProps {\r\n    mileage: number;\r\n}\r\n\r\nconst Infographic: React.FC<InfographicProps> = ({ mileage }) => {\r\n    const laps = calculateLapsAroundEarth(mileage);\r\n    const distanceToMoon = calculateDistanceToMoon(mileage);\r\n    const remainingLaps = laps < 1 ? 1 - laps : 0;\r\n\r\n    return (\r\n        <div className=\"infographic\">\r\n            <h2>Infographic</h2>\r\n            <div className=\"mileage-info\">\r\n                <p>Total Mileage: {mileage} km</p>\r\n                <p>Laps Around Earth: {laps.toFixed(2)}</p>\r\n                {remainingLaps > 0 && <p>Remaining Laps to Complete One: {remainingLaps.toFixed(2)}</p>}\r\n                <p>Distance to Moon: {distanceToMoon.toFixed(2)} km</p>\r\n            </div>\r\n            <div className=\"visualization\">\r\n                <img src=\"/kms/images/earth.svg\" alt=\"Earth\" className=\"earth-image\" />\r\n                <img src=\"/kms/images/moon.svg\" alt=\"Moon\" className=\"moon-image\" />\r\n                {/* Visualization logic will go here */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Infographic;","// Circunferência da Terra em km\r\nconst EARTH_CIRCUMFERENCE_KM = 40075;\r\n// Distância média da Terra à Lua em km\r\nconst EARTH_TO_MOON_KM = 384400;\r\n\r\nexport function calculateLapsAroundEarth(mileage: number): number {\r\n    return mileage / EARTH_CIRCUMFERENCE_KM;\r\n}\r\n\r\nexport function calculateDistanceToMoon(mileage: number): number {\r\n    // Retorna quanto falta para chegar na Lua (se já passou, retorna 0)\r\n    return Math.max(EARTH_TO_MOON_KM - mileage, 0);\r\n}","import React from 'react';\r\nimport './GlobeVisualization.css';\r\n\r\ninterface GlobeVisualizationProps {\r\n    mileage: number;\r\n}\r\n\r\nconst EARTH_CIRCUMFERENCE = 40075; // km\r\n\r\nconst GlobeVisualization: React.FC<GlobeVisualizationProps> = ({ mileage }) => {\r\n    const laps = mileage / EARTH_CIRCUMFERENCE;\r\n    const fullLaps = Math.floor(laps);\r\n    const partialLap = laps - fullLaps;\r\n\r\n    const radius = 60;\r\n    const center = 100;\r\n    const circleGap = 14;\r\n\r\n    // Círculos completos\r\n    const circles = [];\r\n    for (let i = 1; i <= fullLaps; i++) {\r\n        circles.push(\r\n            <circle\r\n                key={i}\r\n                cx={center}\r\n                cy={center}\r\n                r={radius + i * circleGap}\r\n                fill=\"none\"\r\n                stroke=\"#007bff\"\r\n                strokeWidth={4}\r\n                opacity={0.7}\r\n            />\r\n        );\r\n    }\r\n\r\n    // Arco para a fração de volta\r\n    let partialArc = null;\r\n    if (partialLap > 0) {\r\n        const r = radius + (fullLaps + 1) * circleGap;\r\n        const circumference = 2 * Math.PI * r;\r\n        partialArc = (\r\n            <circle\r\n                cx={center}\r\n                cy={center}\r\n                r={r}\r\n                fill=\"none\"\r\n                stroke=\"#ff5733\"\r\n                strokeWidth={4}\r\n                strokeDasharray={`${circumference * partialLap} ${circumference * (1 - partialLap)}`}\r\n                strokeDashoffset={circumference * 0.25}\r\n                opacity={0.85}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div style={{ textAlign: 'center', margin: '30px 0' }}>\r\n            <svg width={center * 2} height={center * 2}>\r\n                {/* Círculos completos */}\r\n                {circles}\r\n                {/* Arco parcial */}\r\n                {partialArc}\r\n                {/* Terra */}\r\n                <image\r\n                    href=\"/kms/images/earth.svg\"\r\n                    x={center - radius}\r\n                    y={center - radius}\r\n                    width={radius * 2}\r\n                    height={radius * 2}\r\n                />\r\n            </svg>\r\n            <div style={{ marginTop: 10 }}>\r\n                <strong>{laps.toFixed(2)} voltas na Terra</strong>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GlobeVisualization;","import React from 'react';\r\n\r\ninterface MoonDistanceVisualizationProps {\r\n    mileage: number;\r\n}\r\n\r\nconst EARTH_TO_MOON_KM = 384400;\r\n\r\nconst MoonDistanceVisualization: React.FC<MoonDistanceVisualizationProps> = ({ mileage }) => {\r\n    // Limita a posição do carro para não passar da Lua\r\n    const progress = Math.min(mileage / EARTH_TO_MOON_KM, 1);\r\n\r\n    // Posições dos elementos no SVG\r\n    const width = 500;\r\n    const height = 120;\r\n    const earthX = 60;\r\n    const moonX = width - 60;\r\n    const centerY = height / 2;\r\n\r\n    // Posição do carro ao longo da linha\r\n    const carX = earthX + (moonX - earthX) * progress;\r\n\r\n    return (\r\n        <div style={{ textAlign: 'center', margin: '30px 0' }}>\r\n            <svg width={width} height={height}>\r\n                {/* Linha entre Terra e Lua */}\r\n                <line\r\n                    x1={earthX + 40}\r\n                    y1={centerY}\r\n                    x2={moonX - 40}\r\n                    y2={centerY}\r\n                    stroke=\"#888\"\r\n                    strokeWidth={6}\r\n                    strokeDasharray=\"8 8\"\r\n                />\r\n                {/* Terra */}\r\n                <image\r\n                    href=\"/kms/images/earth.svg\"\r\n                    x={earthX}\r\n                    y={centerY - 40}\r\n                    width={80}\r\n                    height={80}\r\n                />\r\n                {/* Lua */}\r\n                <image\r\n                    href=\"/kms/images/moon.svg\"\r\n                    x={moonX - 40}\r\n                    y={centerY - 30}\r\n                    width={60}\r\n                    height={60}\r\n                />\r\n                {/* Carrinho */}\r\n                <image\r\n                    href=\"/kms/images/car.svg\"\r\n                    x={carX - 20}\r\n                    y={centerY - 20}\r\n                    width={40}\r\n                    height={40}\r\n                />\r\n            </svg>\r\n            <div style={{ marginTop: 10 }}>\r\n                <strong>\r\n                    {mileage.toLocaleString()} km percorridos ({(progress * 100).toFixed(2)}% do caminho até a Lua)\r\n                </strong>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoonDistanceVisualization;","import React, { useState } from 'react';\r\nimport MileageForm from './components/MileageForm';\r\nimport Infographic from './components/Infographic';\r\nimport GlobeVisualization from './components/GlobeVisualization';\r\nimport MoonDistanceVisualization from './components/MoonDistanceVisualization';\r\nimport './styles/main.css';\r\n\r\nconst App = () => {\r\n    const [mileage, setMileage] = useState(0);\r\n\r\n    const handleMileageSubmit = (mileageValue: number) => {\r\n        setMileage(mileageValue);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <h1>Car Mileage Visualizer</h1>\r\n            <MileageForm onSubmit={handleMileageSubmit} />\r\n            <Infographic mileage={mileage} />\r\n            <GlobeVisualization mileage={mileage} />\r\n            <MoonDistanceVisualization mileage={mileage} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\nconst container = document.getElementById('root');\r\nif (container) {\r\n  const root = ReactDOM.createRoot(container);\r\n  root.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  );\r\n}"],"sourceRoot":""}